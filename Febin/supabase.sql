-- Create the profiles table to store extra user info
CREATE TABLE public.profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email text,
  role user_role NOT NULL DEFAULT 'user',
  contact text
);
-- 1. Create a function that copies the new user's ID and email into 'profiles'
CREATE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, role)
  VALUES (new.id, new.email, 'user'); -- Defaults all new users to 'user'
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 2. Create a trigger that runs the function *after* a user is created
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
-- This function lets you securely check any user's role
CREATE FUNCTION public.get_user_role(user_id uuid)
RETURNS public.user_role AS $$
DECLARE
  role_value public.user_role;
BEGIN
  SELECT role INTO role_value
  FROM public.profiles
  WHERE id = user_id;
  RETURN role_value;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- 1. Create a function that copies the new user's ID and email into 'profiles'
CREATE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, role)
  VALUES (new.id, new.email, 'user'); -- Defaults all new users to 'user'
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 2. Create a trigger that runs the function *after* a user is created
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
-- Create the cars table
CREATE TABLE public.cars (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  model text NOT NULL,
  price_per_day numeric(10, 2) NOT NULL,
  category text,
  status car_status NOT NULL DEFAULT 'Available',
  
  -- This will just store the *file name* (e.g., "C001.jpg")
  image_path text, 
  
  -- Links to the user who owns/listed this car
  owner_id uuid REFERENCES auth.users(id) ON DELETE SET NULL
);
-- This function lets you securely check any user's role
CREATE FUNCTION public.get_user_role(user_id uuid)
RETURNS public.user_role AS $$
DECLARE
  role_value public.user_role;
BEGIN
  SELECT role INTO role_value
  FROM public.profiles
  WHERE id = user_id;
  RETURN role_value;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- This function lets you securely check any user's role
CREATE FUNCTION public.get_user_role(user_id uuid)
  -- 1. Enable RLS on the cars table
ALTER TABLE public.cars ENABLE ROW LEVEL SECURITY;

-- 2. Policy: *Anyone* can see the cars (for your "Browse Cars" tab)
CREATE POLICY "Allow public read access to cars"
ON public.cars FOR SELECT
USING ( true );

-- 3. Policy: Sellers and Admins can add cars.
CREATE POLICY "Sellers and Admins can create cars"
ON public.cars FOR INSERT
WITH CHECK (
  public.get_user_role(auth.uid()) = 'seller' OR
  public.get_user_role(auth.uid()) = 'admin'
);

-- 4. Policy: Sellers can update/delete *only their own* cars.
CREATE POLICY "Sellers can update/delete their own cars"
ON public.cars FOR UPDATE
USING (
  auth.uid() = owner_id AND
  public.get_user_role(auth.uid()) = 'seller'
);

CREATE POLICY "Sellers can delete their own cars"
ON public.cars FOR DELETE
USING (
  auth.uid() = owner_id AND
  public.get_user_role(auth.uid()) = 'seller'
);

-- 5. Policy: Admins can update/delete *any* car.
CREATE POLICY "Admins can update/delete any car"
ON public.cars FOR UPDATE
USING ( public.get_user_role(auth.uid()) = 'admin' );

CREATE POLICY "Admins can delete any car"
ON public.cars FOR DELETE
USING ( public.get_user_role(auth.uid()) = 'admin' );
RETURNS public.user_role AS $$
DECLARE
  role_value public.user_role;
BEGIN
  SELECT role INTO role_value
  FROM public.profiles
  WHERE id = user_id;
  RETURN role_value;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
CREATE POLICY "user_read" ON storage.objects
  FOR SELECT TO authenticated
  USING (
    bucket_id = 'car_images' AND (
      public.get_user_role(auth.uid()) = 'seller' OR
      public.get_user_role(auth.uid()) = 'admin'
    )
  );
SELECT * FROM storage.objects
WHERE bucket_id = 'car_images'
  AND (
    public.get_user_role(auth.uid()) = 'seller' OR
    public.get_user_role(auth.uid()) = 'admin'
  );
-- !! REPLACE 'PASTE_SELLER_UUID_HERE' with the ID you copied !!
INSERT INTO public.cars (name, model, price_per_day, category, status, owner_id)
VALUES
('Toyota Camry', 'Camry', 3500, 'Sedan', 'Available', '796848a6-d0ef-4aa1-8279-9564b5ba326f'),
('Honda Civic', 'Civic', 3200, 'Sedan', 'Available', '796848a6-d0ef-4aa1-8279-9564b5ba326f');
